1. Setup and Initial Configuration üõ†Ô∏è
Install Python & Django:

bash

python3 -m venv env  # Create a virtual environment
source env/bin/activate  # Activate the environment
pip install django  # Install Django
django-admin startproject blog_project  # Start a new Django project
cd blog_project
python manage.py startapp blog_app  # Create a new app
Add the App to Installed Apps: Update INSTALLED_APPS in settings.py:

python

INSTALLED_APPS = [
    ...
    'blog_app',
]
2. Building Models üèóÔ∏è
Create Models in blog_app/models.py:

python

from django.db import models
from django.contrib.auth.models import User

class BlogPost(models.Model):
    title = models.CharField(max_length=200)
    content = models.TextField()
    author = models.ForeignKey(User, on_delete=models.CASCADE)
    created_at = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return self.title
Run Migrations:

bash

python manage.py makemigrations
python manage.py migrate
3. Creating Views üëÄ
Define Views in blog_app/views.py:
python

from django.shortcuts import render, get_object_or_404, redirect
from django.contrib.auth.decorators import login_required
from .models import BlogPost
from .forms import BlogPostForm

def home_view(request):
    posts = BlogPost.objects.all()
    return render(request, 'blog_app/home.html', {'posts': posts})

def detail_view(request, post_id):
    post = get_object_or_404(BlogPost, id=post_id)
    return render(request, 'blog_app/detail.html', {'post': post})

@login_required
def create_post_view(request):
    if request.method == 'POST':
        form = BlogPostForm(request.POST)
        if form.is_valid():
            post = form.save(commit=False)
            post.author = request.user
            post.save()
            return redirect('home')
    else:
        form = BlogPostForm()
    return render(request, 'blog_app/create_post.html', {'form': form})
4. Setting Up URLs üîó
Update blog_project/urls.py:

python

from django.contrib import admin
from django.urls import path, include

urlpatterns = [
    path('admin/', admin.site.urls),
    path('', include('blog_app.urls')),
]
Create blog_app/urls.py:

python

from django.urls import path
from . import views

urlpatterns = [
    path('', views.home_view, name='home'),
    path('post/<int:post_id>/', views.detail_view, name='detail'),
    path('create/', views.create_post_view, name='create_post'),
]
5. Developing Templates üé®
Create Templates Directory: Create blog_app/templates/blog_app/ and add these templates:

home.html:

html

<h1>Blog Posts</h1>
<ul>
    {% for post in posts %}
    <li>
        <a href="{% url 'detail' post.id %}">{{ post.title }}</a> by {{ post.author }}
        ({{ post.created_at|date:"M d, Y" }})
    </li>
    {% endfor %}
</ul>
<a href="{% url 'create_post' %}">Create a New Post</a>
detail.html:

html

<h1>{{ post.title }}</h1>
<p>{{ post.content }}</p>
<p>By {{ post.author }} on {{ post.created_at|date:"M d, Y" }}</p>
<a href="{% url 'home' %}">Back to Home</a>
create_post.html:

html

<h1>Create a New Blog Post</h1>
<form method="post">
    {% csrf_token %}
    {{ form.as_p }}
    <button type="submit">Post</button>
</form>
<a href="{% url 'home' %}">Cancel</a>
6. User Authentication üîí
Update blog_project/urls.py to include auth URLs:

python

from django.contrib.auth import views as auth_views

urlpatterns += [
    path('login/', auth_views.LoginView.as_view(), name='login'),
    path('logout/', auth_views.LogoutView.as_view(), name='logout'),
    path('register/', views.register, name='register'),  # Add this later
]
Create a Register View in views.py:

python

from django.contrib.auth.forms import UserCreationForm

def register(request):
    if request.method == 'POST':
        form = UserCreationForm(request.POST)
        if form.is_valid():
            form.save()
            return redirect('login')
    else:
        form = UserCreationForm()
    return render(request, 'registration/register.html', {'form': form})
Add registration/register.html Template:

html

<h1>Register</h1>
<form method="post">
    {% csrf_token %}
    {{ form.as_p }}
    <button type="submit">Register</button>
</form>
<a href="{% url 'login' %}">Already have an account? Login</a>
7. Bonus: Styling and Search Functionality üéÅ
Add Basic Styling: Include a CSS file in static/blog_app/style.css and link it in templates.

Implement Search: Modify home_view:

python

def home_view(request):
    query = request.GET.get('search', '')
    posts = BlogPost.objects.filter(title__icontains=query) if query else BlogPost.objects.all()
    return render(request, 'blog_app/home.html', {'posts': posts, 'query': query})
Update home.html:

html

<form method="get">
    <input type="text" name="search" value="{{ query }}" placeholder="Search posts...">
    <button type="submit">Search</button>
</form>
8. Final Steps üèÅ
Test the application with:
bash

python manage.py runserver
Access at http://127.0.0.1:8000/.